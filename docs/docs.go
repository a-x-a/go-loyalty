// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/balance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Получение текущего баланса пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Получение баланса",
                "operationId": "balance-get",
                "responses": {
                    "200": {
                        "description": "Успешная обработка запроса",
                        "schema": {
                            "$ref": "#/definitions/Balance"
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    }
                }
            }
        },
        "/user/balance/withdraw": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Запрос на списание средств",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Запрос на списание средств",
                "operationId": "balance-withdraw",
                "parameters": [
                    {
                        "description": "` + "`" + `order` + "`" + ` — номер заказа, ` + "`" + `sum` + "`" + ` — сумма баллов к списанию в счёт оплаты",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Withdraw"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная обработка запроса"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    },
                    "402": {
                        "description": "На счету недостаточно средств"
                    },
                    "422": {
                        "description": "Неверный номер заказа"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Аутентификация производится по паре логин/пароль",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Аутентификация пользователя",
                "operationId": "user-login",
                "parameters": [
                    {
                        "description": "Логин и пароль поьзователя",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно аутентифицирован"
                    },
                    "400": {
                        "description": "Неверный формат запроса"
                    },
                    "401": {
                        "description": "Неверная пара логин/пароль"
                    }
                }
            }
        },
        "/user/orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Получение списка загруженных номеров заказов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Получение списка заказов",
                "operationId": "orders-get",
                "responses": {
                    "200": {
                        "description": "Успешная обработка запроса",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Order"
                            }
                        }
                    },
                    "204": {
                        "description": "Нет данных для ответа"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Загрузка номера заказа",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Загрузка номера заказа",
                "operationId": "orders-upload",
                "parameters": [
                    {
                        "description": "Номер заказа",
                        "name": "number",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Номер заказа уже был загружен"
                    },
                    "202": {
                        "description": "Новый номер заказа принят в обработку"
                    },
                    "400": {
                        "description": "Неверный формат запроса"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    },
                    "409": {
                        "description": "Номер заказа уже был загружен другим пользователем"
                    },
                    "422": {
                        "description": "Неверный номер заказа"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Регистрация производится по паре логин/пароль",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Регистрация пользователя",
                "operationId": "user-register",
                "parameters": [
                    {
                        "description": "Логин и пароль пользователя",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно зарегистрирован и аутентифицирован"
                    },
                    "400": {
                        "description": "Неверный формат запроса"
                    },
                    "409": {
                        "description": "Логин уже занят"
                    }
                }
            }
        },
        "/user/withdrawals": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Получение информации о выводе средств",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Получение информации о выводе средств",
                "operationId": "balance-withdrawals",
                "responses": {
                    "200": {
                        "description": "Успешная обработка запроса",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Withdrawal"
                            }
                        }
                    },
                    "204": {
                        "description": "Нет ни одного списания"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    }
                }
            }
        }
    },
    "definitions": {
        "Account": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "example": "\u003clogin\u003e"
                },
                "password": {
                    "type": "string",
                    "example": "\u003cpassword\u003e"
                }
            }
        },
        "Balance": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "number",
                    "example": 500.5
                },
                "withdrawn": {
                    "type": "number",
                    "example": 42
                }
            }
        },
        "Order": {
            "type": "object",
            "properties": {
                "accrual": {
                    "type": "number",
                    "example": 500
                },
                "number": {
                    "type": "string",
                    "example": "9278923470"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "NEW",
                        "PROCESSING",
                        "INVALID",
                        "PROCESSED"
                    ],
                    "example": "PROCESSED"
                },
                "uploaded_at": {
                    "type": "string",
                    "example": "2020-12-10T15:15:45+03:00"
                }
            }
        },
        "Withdraw": {
            "type": "object",
            "required": [
                "order",
                "sum"
            ],
            "properties": {
                "order": {
                    "type": "string",
                    "example": "2377225624"
                },
                "sum": {
                    "type": "number",
                    "example": 751
                }
            }
        },
        "Withdrawal": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string",
                    "example": "2377225624"
                },
                "processed_at": {
                    "type": "string",
                    "example": "2020-12-09T16:09:57+03:00"
                },
                "sum": {
                    "type": "number",
                    "example": 500
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "API «Гофермарт»",
	Description:      "API сервер накопительной система лояльности «Гофермарт».",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
